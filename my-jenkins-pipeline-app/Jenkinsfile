pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-24.0.2'  
    
    environment {
        CI = 'true'
        NODE_ENV = 'test'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing npm dependencies...'
                sh 'npm ci'  
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running linting...'
                sh 'npm run lint || echo "Linting completed with warnings"'
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building application...'
                script {
                    // Check if build script exists
                    def packageJson = readJSON file: 'package.json'
                    if (packageJson.scripts?.build) {
                        sh 'npm run build'
                    } else {
                        echo 'No build script found, skipping build stage'
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'npm test'
            }
            post {
                always {
                    // Publish test results if using jest with junit reporter
                    script {
                        if (fileExists('junit.xml')) {
                            junit 'junit.xml'
                        }
                        if (fileExists('coverage/lcov.info')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying to environment based on branch: ${env.BRANCH_NAME}"
                    
                    if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master') {
                        echo 'Deploying to production...'
                        // Add your production deployment commands here
                        sh '''
                            echo "Production deployment would happen here"
                            # npm run deploy:prod
                        '''
                    } else if (env.BRANCH_NAME == 'develop') {
                        echo 'Deploying to staging...'
                        sh '''
                            echo "Staging deployment would happen here"
                            # npm run deploy:stage
                        '''
                    } else {
                        echo 'Feature branch detected, skipping deployment'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            cleanWs()  // Clean workspace after build
        }
        success {
            echo 'Pipeline succeeded!'
            // You can add notifications here (email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed!'
            // Add failure notifications here
        }
    }
}